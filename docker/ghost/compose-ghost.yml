version: ${DOCKER_COMPOSE_VERSION:-3.7}

networks:
  ${PROXY_NETWORK:-proxy-public-net}:
    external: true
  ${NOTIFICATION_NETWORK:-notification-net}:
    external: true
  ${GHOST_NETWORK:-ghost_internal}:
    internal: true

services:
  ghost:
    env_file:
      - ../env-docker.env    # Global environment variables
      - ./env-ghost.env      # Application-specific environment variables
    image: ${GHOST_IMAGE:-ghost:5}
    hostname: ${GHOST_HOSTNAME:-ghost}
    environment:
      # see https://ghost.org/docs/config/#configuration-options  
      database__client: mysql
      database__connection__host: ${DB_HOST:-ghost_db}
      database__connection__user: ${DB_USER:-ghost}
      database__connection__password: ${DB_PASSWORD}
      database__connection__database: ${DB_NAME:-ghost}
      url: https://${GHOST_DOMAIN:-yourdomain.com}
      # contrary to the default mentioned in the linked documentation, this image defaults to NODE_ENV=production (so development mode needs to be explicitly specified if desired)
      #NODE_ENV: development
    volumes:
      - ${CONTENT_PATH:-./content}:/var/lib/ghost/content
    networks:
      - ${PROXY_NETWORK:-proxy-public-net}
      - ${NOTIFICATION_NETWORK:-notification-net}
      - ${GHOST_NETWORK:-ghost_internal}
    labels:
      #connect the container to traefik and define which network to use
      - traefik.enable=true
      - traefik.docker.network=${PROXY_NETWORK:-proxy-public-net}
      #enabling http
      - traefik.http.routers.${CONTAINER_NAME:-ghost}-http.rule=Host(`${GHOST_DOMAIN:-yourdomain.com}`) || Host(`www.${GHOST_DOMAIN:-yourdomain.com}`)
      - traefik.http.routers.${CONTAINER_NAME:-ghost}-http.entrypoints=http
      #Define and use of middelware to force http to https
      - traefik.http.middlewares.httptohttps.redirectscheme.scheme=https
      - traefik.http.middlewares.httptohttps.redirectscheme.permanent=true
      - traefik.http.routers.${CONTAINER_NAME:-ghost}-http.middlewares=httptohttps
      #enabling https
      - traefik.http.routers.${CONTAINER_NAME:-ghost}-https.rule=Host(`${GHOST_DOMAIN:-yourdomain.com}`) || Host(`www.${GHOST_DOMAIN:-yourdomain.com}`)
      - traefik.http.routers.${CONTAINER_NAME:-ghost}-https.entrypoints=https
      #Define and use of middleware redirecting www to non-www
      - traefik.http.middlewares.www-to-non-www.redirectregex.regex=^https?://www.${GHOST_DOMAIN:-yourdomain.com}/(.*)
      - traefik.http.middlewares.www-to-non-www.redirectregex.replacement=https://${GHOST_DOMAIN:-yourdomain.com}/$${1}
      - traefik.http.middlewares.www-to-non-www.redirectregex.permanent=true
      - traefik.http.routers.${CONTAINER_NAME:-ghost}-https.middlewares=www-to-non-www
      #Certificate resolver and certificates names to use for tls
      - traefik.http.routers.${CONTAINER_NAME:-ghost}-https.tls.certresolver=${CERT_RESOLVER:-dnschallengeovh}
      - traefik.http.routers.${CONTAINER_NAME:-ghost}-https.tls.domains[0].main=*.${GHOST_DOMAIN:-yourdomain.com}
      - traefik.http.routers.${CONTAINER_NAME:-ghost}-https.tls.domains[0].sans=${GHOST_DOMAIN:-yourdomain.com}
      #Define what port to reach to access the container/service
      - traefik.http.routers.${CONTAINER_NAME:-ghost}-https.service=${CONTAINER_NAME:-ghost}
      - traefik.http.services.${CONTAINER_NAME:-ghost}.loadbalancer.server.port=${APP_PORT:-2368}
      #Watchtower watching updates
      - com.centurylinklabs.watchtower.enable=true
    restart: unless-stopped

  ghost_db:
    env_file:
      - ../env-docker.env    # Global environment variables
      - ./env-ghost.env      # Application-specific environment variables
    image: ${DB_IMAGE:-mysql:8.0}
    hostname: ${DB_HOST:-ghost_db}
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${DB_USER:-ghost}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME:-ghost}
    volumes:
      - ${DB_PATH:-./db}:/var/lib/mysql
    networks:
      - ${GHOST_NETWORK:-ghost_internal}
    restart: unless-stopped