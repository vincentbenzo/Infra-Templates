version: ${DOCKER_COMPOSE_VERSION:-3.7}

networks:
  ${PROXY_NETWORK:-proxy-public-net}:        # Network for reverse proxy traffic
    external: true
  service_only:                             # Provide the communication network between services only
    internal: true
  database_only:                           # Provide the communication between ttrss and database only
    internal: true

services:
  service.rss:
    env_file:
      - ../env-docker.env    # Global environment variables
      - ./env-ttrss.env      # Application-specific environment variables
    image: ${TTRSS_IMAGE:-wangqiru/ttrss:latest}
    container_name: ${CONTAINER_NAME:-ttrss}
    environment:
      - SELF_URL_PATH=https://${TTRSS_SUBDOMAIN:-ttrss}.${BASE_DOMAIN:-yourdomain.com}
      - DB_PASS=${DB_PASSWORD:-changeme}
      - PUID=${PUID:-1019}
      - PGID=${PGID:-1000}
    volumes:
      - ${ICONS_PATH:-./feed-icons}:/var/www/feed-icons/
    networks:
      - ${PROXY_NETWORK:-proxy-public-net}
      - service_only
      - database_only
    stdin_open: true
    tty: true
    healthcheck:
      test: 
        - "CMD"
        - "/bin/sh"
        - "-c"
        - "wget --no-verbose --tries=1 --spider http://localhost:${APP_PORT:-80}/ && wget --no-verbose --tries=1 --spider https://${TTRSS_SUBDOMAIN:-ttrss}.${BASE_DOMAIN:-yourdomain.com}/"
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-20s}
      retries: ${HEALTHCHECK_RETRIES:-3}
      start_period: ${HEALTHCHECK_START_PERIOD:-40s}
    labels:
      # Basic Traefik setup
      - traefik.enable=true
      - traefik.docker.network=${PROXY_NETWORK:-proxy-public-net}
      # HTTP configuration with automatic HTTPS redirect
      - traefik.http.routers.${CONTAINER_NAME:-ttrss}-http.rule=Host(`${TTRSS_SUBDOMAIN:-ttrss}.${BASE_DOMAIN:-yourdomain.com}`)
      - traefik.http.routers.${CONTAINER_NAME:-ttrss}-http.entrypoints=http
      - traefik.http.middlewares.httptohttps.redirectscheme.scheme=https
      - traefik.http.routers.${CONTAINER_NAME:-ttrss}-http.middlewares=httptohttps
      # HTTPS configuration with SSL
      - traefik.http.routers.${CONTAINER_NAME:-ttrss}-https.rule=Host(`${TTRSS_SUBDOMAIN:-ttrss}.${BASE_DOMAIN:-yourdomain.com}`)
      - traefik.http.routers.${CONTAINER_NAME:-ttrss}-https.entrypoints=https
      - traefik.http.routers.${CONTAINER_NAME:-ttrss}-https.tls.certresolver=${CERT_RESOLVER:-dnschallengeovh}
      - traefik.http.routers.${CONTAINER_NAME:-ttrss}-https.tls.domains[0].main=*.${BASE_DOMAIN:-yourdomain.com}
      - traefik.http.routers.${CONTAINER_NAME:-ttrss}-https.tls.domains[0].sans=${BASE_DOMAIN:-yourdomain.com}
      # Service definition
      - traefik.http.routers.${CONTAINER_NAME:-ttrss}-https.service=${CONTAINER_NAME:-ttrss}_server_service
      - traefik.http.services.${CONTAINER_NAME:-ttrss}_server_service.loadbalancer.server.port=${APP_PORT:-80}
      # Enable automatic updates through Watchtower
      - com.centurylinklabs.watchtower.enable=true
    restart: always

  service.mercury:
    env_file:
      - ../env-docker.env
      - ./env-ttrss.env
    image: ${MERCURY_IMAGE:-wangqiru/mercury-parser-api:latest}
    container_name: ${MERCURY_CONTAINER:-mercury}
    networks:
      - ${PROXY_NETWORK:-proxy-public-net}
      - service_only
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-20s}
      retries: ${HEALTHCHECK_RETRIES:-3}
      start_period: ${HEALTHCHECK_START_PERIOD:-40s}
    labels:
      # Enable automatic updates through Watchtower
      - com.centurylinklabs.watchtower.enable=true
    restart: always

  database.postgres:
    env_file:
      - ../env-docker.env
      - ./env-ttrss.env
    image: ${POSTGRES_IMAGE:-postgres:13-alpine}
    container_name: ${POSTGRES_CONTAINER:-postgres}
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD:-changeme}
    volumes:
      - ${DB_PATH:-./db}:/var/lib/postgresql/data
    networks:
      - database_only
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-20s}
      retries: ${HEALTHCHECK_RETRIES:-3}
      start_period: ${HEALTHCHECK_START_PERIOD:-40s}
    labels:
      # Enable automatic updates through Watchtower
      - com.centurylinklabs.watchtower.enable=true
    restart: always