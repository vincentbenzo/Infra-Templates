version: ${DOCKER_COMPOSE_VERSION:-3.7}

networks:
  ${PROXY_NETWORK:-proxy-public-net}:
    external: true
  ${MEDIA_NETWORK:-media-automation-net}:
    external: true
  ${NOTIFICATION_NETWORK:-notification-net}:
    external: true

services:
  lidarr:
    env_file:
      - ../env-docker.env    # Global environment variables
      - ./env-lidarr.env     # Application-specific environment variables
    image: ${LIDARR_IMAGE:-linuxserver/lidarr:latest}
    container_name: ${CONTAINER_NAME:-lidarr}
    environment:
      - PUID=${PUID:-1005}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-Europe/Paris}
    volumes:
      - ${CONFIG_PATH:-./config}:/config
      - ${MEDIA_PATH:-/data}:/data
    networks:
      - ${PROXY_NETWORK:-proxy-public-net}
      - ${MEDIA_NETWORK:-media-automation-net}
      - ${NOTIFICATION_NETWORK:-notification-net}
    healthcheck:
      test: 
        - "CMD"
        - "/bin/sh"
        - "-c"
        - "wget --no-verbose --tries=1 --spider http://localhost:${APP_PORT:-8686}/ && wget --no-verbose --tries=1 --spider https://${LIDARR_SUBDOMAIN:-music}.${BASE_DOMAIN:-yourdomain.com}/"
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-20s}
      retries: ${HEALTHCHECK_RETRIES:-3}
      start_period: ${HEALTHCHECK_START_PERIOD:-40s}
    labels:
    #connect the container to traefik and define which network to use
      - traefik.enable=true
      - traefik.docker.network=${PROXY_NETWORK:-proxy-public-net}
      #enabling http
      - traefik.http.routers.${CONTAINER_NAME:-lidarr}-http.rule=Host(`${LIDARR_SUBDOMAIN:-music}.${BASE_DOMAIN:-yourdomain.com}`)
      - traefik.http.routers.${CONTAINER_NAME:-lidarr}-http.entrypoints=http
      #Define and use of middelware to force http to https
      - traefik.http.middlewares.httptohttps.redirectscheme.scheme=https
      - traefik.http.routers.${CONTAINER_NAME:-lidarr}-http.middlewares=httptohttps
      #enabling https
      - traefik.http.routers.${CONTAINER_NAME:-lidarr}-https.rule=Host(`${LIDARR_SUBDOMAIN:-music}.${BASE_DOMAIN:-yourdomain.com}`)
      - traefik.http.routers.${CONTAINER_NAME:-lidarr}-https.entrypoints=https
      #Certificate resolver and certificates names to use for tls
      - traefik.http.routers.${CONTAINER_NAME:-lidarr}-https.tls.certresolver=${CERT_RESOLVER:-dnschallengeovh}
      - traefik.http.routers.${CONTAINER_NAME:-lidarr}-https.tls.domains[0].main=*.${BASE_DOMAIN:-yourdomain.com}
      - traefik.http.routers.${CONTAINER_NAME:-lidarr}-https.tls.domains[0].sans=${BASE_DOMAIN:-yourdomain.com}
      #Define what port to reach to access the container/service
      - traefik.http.routers.${CONTAINER_NAME:-lidarr}-https.service=${CONTAINER_NAME:-lidarr}_service
      - traefik.http.services.${CONTAINER_NAME:-lidarr}_service.loadbalancer.server.port=${APP_PORT:-8686}
      #Watchtower watching updates
      - com.centurylinklabs.watchtower.enable=true
    restart: unless-stopped